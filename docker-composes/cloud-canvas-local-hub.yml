services:
    redis:
        image: redis:alpine
        container_name: redis
        ports:
            - '6379:6379'
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 30s
            retries: 3
            start_period: 20s
            timeout: 5s
        # logging:
        #     driver: 'fluentd'
        #     options:
        #         fluentd-address: 'localhost:24224'
        #         fluentd-async-connect: 'true'
        #         tag: 'redis'
        networks:
            - cloud-canvas-network
            - cloud-canvas-database-network

    mysql:
        image: mysql:8.0
        container_name: mysql
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        ports:
            - '3306:3306'
        volumes:
            - ../config/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
            - ../config/mysql/log.cnf:/etc/mysql/conf.d/log.cnf:ro
        healthcheck:
            test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 20s
        command:
            - sh
            - -c
            - |
                mkdir -p /var/log/mysql && \
                touch /var/log/mysql/general.log && \
                tail -f /var/log/mysql/general.log & \
                exec docker-entrypoint.sh mysqld
        # logging:
        #     driver: 'fluentd'
        #     options:
        #         fluentd-address: 'localhost:24224'
        #         fluentd-async-connect: 'true'
        #         tag: 'mysql'
        networks:
            - cloud-canvas-network
            - cloud-canvas-database-network
        restart: unless-stopped

    back:
        build:
            context: ../
            dockerfile: apps/server/Dockerfile
        container_name: back
        environment:
            NODE_ENV: ${NODE_ENV}
            DATABASE_URL: ${DATABASE_URL}
            NCLOUD_ACCESS_KEY: ${NCLOUD_ACCESS_KEY}
            NCLOUD_SECRET_KEY: ${NCLOUD_SECRET_KEY}
            REDIS_HOST: ${REDIS_HOST}
            REDIS_PORT: ${REDIS_PORT}
        ports:
            - '3000:3000'
        depends_on:
            mysql:
                condition: service_healthy
            redis:
                condition: service_healthy
        entrypoint: sh -c "cd apps/server/ && npx prisma migrate reset --force && npx prisma generate && node ./dist/src/main.js"
        networks:
            - cloud-canvas-network
        restart: unless-stopped

    front-hub:
        build:
            context: ../
            dockerfile: apps/hub/Dockerfile
        container_name: hub
        ports:
            - '5001:3000'
        networks:
            - cloud-canvas-network
        restart: unless-stopped

    # 로깅이 필요할 경우 사용
    # fluentd:
    #     build: ./monitorin/logging/fluentd/
    #     container_name: fluentd
    #     volumes:
    #         - ./monitoring/logging/fluentd/conf/fluent.conf:/fluentd/etc/fluent.conf
    #     ports:
    #         - '24224:24224'
    #         - '24224:24224/udp'
    #     healthcheck:
    #         test: ['CMD', 'curl', '-f', 'http://localhost:24224/api/health']
    #         interval: 30s
    #         retries: 3
    #         start_period: 10s
    #         timeout: 10s
    #     networks:
    #         - cloud-canvas-network

    # elasticsearch:
    #     image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    #     container_name: elasticsearch
    #     environment:
    #         - 'discovery.type=single-node'
    #     ports:
    #         - '9200:9200'
    #     networks:
    #         - cloud-canvas-network

    # kibana:
    #     image: docker.elastic.co/kibana/kibana:7.13.1
    #     container_name: kibana
    #     ports:
    #         - '5601:5601'
    #     networks:
    #         - cloud-canvas-network

networks:
    cloud-canvas-network:
        driver: bridge
    cloud-canvas-database-network:
        driver: bridge
